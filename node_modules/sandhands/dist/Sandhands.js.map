{"version":3,"file":"Sandhands.js","sources":["../source/functions/firstError.js","../source/sanitize/array.js","../source/validate/allowedOptions.js","../source/functions/onlyUnique.js","../source/customFormats.js","../source/functions/interpretCustomFormats.js","../source/exports/ANY.js","../source/exports/sanitize.js","../source/exports/valid.js","../source/exports/Format.js","../source/functions/interpretFormatShorthand.js","../source/functions/resolveInlineOptions.js","../source/validate/object.js","../source/validate/any.js","../source/validate/string.js","../source/validate/number.js","../source/functions/ensureValidArguments.js","../source/functions/resolveFormat.js","../source/sanitize/object.js","../source/defaultOptions.js","../source/functions/validEmail.js","../source/sanitize/booleanFormats.js","../source/sanitize/function.js","../source/functions/deepEqual.js","../source/sanitize/any.js","../source/sanitize/string.js","../source/sanitize/number.js","../source/sanitize/boolean.js","../source/sanitize/null.js","../source/sanitize/undefined.js","../source/exports/details.js","../source/exports/And.js","../source/exports/Not.js","../source/exports/Or.js","../source/exports/customFormat.js","../source/exports/getFormatErrors.js","../source/exports/reconstructFormat.js","../source/exports/reduceFormat.js","../source/exports/sandhandsExpress.js","../source/exports/setDefault.js","../source/functions/isEmptyObject.js"],"sourcesContent":["function firstError(errors, deep = false) {\r\n  if (typeof errors == 'object' && errors !== null) {\r\n    if (Array.isArray(errors)) {\r\n      for (let i = 0; i < errors.length; i++) {\r\n        let error = errors[i]\r\n        if (deep === true) error = firstError(error, true)\r\n        if (error !== null) return error\r\n      }\r\n      return null\r\n    } else {\r\n      const values = Object.values(errors)\r\n      for (let i = 0; i < values.length; i++) {\r\n        let error = values[i]\r\n        if (deep === true) error = firstError(error, true)\r\n        if (error !== null) return error\r\n      }\r\n      return null\r\n    }\r\n  }\r\n  return errors\r\n}\r\n\r\nexport default firstError\r\n","import firstError from '../functions/firstError'\r\n\r\nfunction sanitizeArray(sanitizeAny, input, format, options) {\r\n  if (!Array.isArray(input)) return 'Expected Array'\r\n  let { firstAsStandard, strict, minLength, maxLength, length } = options\r\n  if (format === Array) {\r\n    format = []\r\n    if (!options.hasOwnProperty('strict')) strict = false\r\n  }\r\n  const validators = [...format]\r\n  if (\r\n    !options.hasOwnProperty('firstAsStandard') &&\r\n    !options.hasOwnProperty('standard') &&\r\n    format.length === 1\r\n  )\r\n    firstAsStandard = true // Default to true only if there's only one entry in the array.\r\n  if (options.firstAsStandard === true && options.hasOwnProperty('standard'))\r\n    throw new Error('Cannot both specify standard manually and set firstAsStandard to true.')\r\n  const hasStandard = firstAsStandard === true || options.hasOwnProperty('standard')\r\n  let standard = options.standard || null\r\n  if (firstAsStandard === true) {\r\n    if (format.length < 1) throw new Error('Missing First Array Value for First As Standard')\r\n    standard = validators.splice(0, 1)[0]\r\n  }\r\n\r\n  if (!options.hasOwnProperty('minLength') && (validators.length > 0 || hasStandard === true))\r\n    minLength = 1\r\n  if (typeof minLength == 'number' && input.length < minLength) return 'Array Too Short'\r\n  if (options.hasOwnProperty('maxLength') && input.length > maxLength) return 'Array Too Long'\r\n  if (options.hasOwnProperty('length') && input.length !== length) return 'Incorrect Array Length'\r\n\r\n  const errors = []\r\n\r\n  Array.prototype.forEach.call(input, (inputValue, index) => {\r\n    if (validators.hasOwnProperty(index)) {\r\n      const inputError = sanitizeAny(inputValue, format[index])\r\n      if (inputError !== null) errors[index] = inputError\r\n    } else if (hasStandard) {\r\n      const inputError = sanitizeAny(inputValue, standard)\r\n      if (inputError !== null) errors[index] = inputError\r\n    } else if (strict === true) {\r\n      errors[index] = 'Invalid Index #' + index\r\n    }\r\n  })\r\n  if (strict === true) {\r\n    validators.forEach((value, index) => {\r\n      if (!Object.prototype.hasOwnProperty.call(input, index)) {\r\n        errors[index] = 'Missing Index #' + index\r\n      }\r\n    })\r\n  }\r\n  if (errors.length < 1) return null\r\n  return errors\r\n}\r\n\r\nexport default sanitizeArray\r\n","const universal = Object.freeze(['equalTo', 'validate', 'nullable'])\r\n\r\n//prettier-ignore\r\nlet primitives = new Map([\r\n  [String, Object.freeze([\"trimmed\", \"regex\", \"minLength\", \"maxLength\", \"length\", \"allowed\", \"banned\", \"lowercase\", \"uppercase\", \"email\", \"whitespace\"])],\r\n  [Number, Object.freeze([\"allowNaN\", \"finite\", \"min\", \"max\", \"even\", \"odd\", \"integer\"])]\r\n])\r\nObject.defineProperties(primitives, {\r\n  set: {\r\n    get: () => {\r\n      throw new Error('cannot Modify')\r\n    },\r\n    configurable: false\r\n  },\r\n  delete: {\r\n    get: () => {\r\n      throw new Error('cannot Modify')\r\n    },\r\n    configurable: false\r\n  }\r\n})\r\nObject.freeze(primitives)\r\n\r\nconst object = Object.freeze([\r\n  'strict',\r\n  'standard',\r\n  'allOptional',\r\n  'optionalProps',\r\n  'bannedProps',\r\n  'class'\r\n])\r\nconst array = Object.freeze([\r\n  'strict',\r\n  'firstAsStandard',\r\n  'minLength',\r\n  'maxLength',\r\n  'length',\r\n  'standard'\r\n])\r\n\r\nconst functionOptions = Object.freeze([])\r\n\r\nexport default Object.freeze({ universal, primitives, object, array, function: functionOptions })\r\n","function onlyUnique(value, index, self) {\r\n  return self.indexOf(value) === index\r\n}\r\n\r\nexport default onlyUnique\r\n","const customFormats = {\r\n  email: { _: String, email: true, lowercase: true },\r\n  username: {\r\n    _: String,\r\n    regex: /^[a-zA-Z\\-0-9]+$/,\r\n    trimmed: true,\r\n    minLength: 3,\r\n    lowercase: true,\r\n    validate: [\r\n      str => (str.startsWith('-') ? `Username cannot begin with a dash` : true),\r\n      str => (str.endsWith('-') ? `Username cannot end with a dash` : true),\r\n      str => (str.includes('--') ? 'Username cannot include consecutive dashes' : true)\r\n    ]\r\n  },\r\n  password: { _: String, minLength: 8 },\r\n  zipCode: { _: String, regex: /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/ }\r\n}\r\n\r\ntry {\r\n  const validator = require('is-my-ip-valid')\r\n  const validate = validator()\r\n  customFormats.IP = { _: String, validate: str => validate(str) }\r\n} catch (error) {}\r\n\r\nexport default customFormats\r\n","import customFormats from '../customFormats'\r\n\r\nfunction interpretCustomFormats(format) {\r\n  if (typeof format == 'string') {\r\n    if (!customFormats.hasOwnProperty(format))\r\n      throw new Error(`Custom Format \"${format}\" Not Found`)\r\n    return customFormats[format]\r\n  } else {\r\n  }\r\n  return format\r\n}\r\n\r\nexport default interpretCustomFormats\r\n","class ANY {}\n\nexport default Object.freeze(ANY)\n","import sanitizeAny from '../sanitize/any'\r\nimport firstError from '../functions/firstError'\r\n\r\nfunction sanitize(...args) {\r\n  const sanitationDetails = sanitizeAny(...args)\r\n  const error = firstError(sanitationDetails, true)\r\n\r\n  if (error !== null) {\r\n    const finalError = new Error(error)\r\n    finalError.sanitationDetails = sanitationDetails\r\n    throw finalError\r\n  }\r\n  return true\r\n}\r\n\r\nexport default sanitize\r\n","import sanitizeAny from '../sanitize/any'\r\n\r\nfunction valid(...args) {\r\n  return sanitizeAny(...args) === null\r\n}\r\n\r\nexport default valid\r\n","import resolveFormat from '../functions/resolveFormat'\r\nimport validate from '../validate/any'\r\nimport ANY from './ANY'\r\nimport details from './details'\r\nimport sanitize from './sanitize'\r\nimport valid from './valid'\r\nimport onlyUnique from '../functions/onlyUnique'\r\n\r\nclass Format {\r\n  constructor(...args) {\r\n    const inlineOptions = resolveFormat(...args)\r\n    validate(inlineOptions)\r\n\r\n    this.format = { ...(inlineOptions.options || {}), _: inlineOptions.format || ANY }\r\n  }\r\n  setOptions(options) {\r\n    if (typeof options != 'object' || options === null) throw new Error('Options must be an object')\r\n    if (options.hasOwnProperty('_'))\r\n      console.warn(\r\n        'Warning: Setting the primary format (the \"_\" property) through the setOptions, this could cause unintended behavior.'\r\n      )\r\n    Object.assign(this.format, options)\r\n  }\r\n  setOption(optionName, value) {\r\n    if (typeof optionName != 'string') throw new Error('option name must be a string')\r\n    this.format[optionName] = value\r\n  }\r\n  getOption(optionName) {\r\n    if (typeof optionName != 'string') throw new Error('option name must be a string')\r\n    return this.format[optionName]\r\n  }\r\n  details(input) {\r\n    return details(input, this.format)\r\n  }\r\n  valid(input) {\r\n    return valid(input, this.format)\r\n  }\r\n  sanitize(input) {\r\n    return sanitize(input, this.format)\r\n  }\r\n  Or(...formats) {\r\n    throw new Error('This feature has been temporarily disabled.')\r\n    if (formats.length < 1) throw new Error('Must supply at least 1 format')\r\n    formats.forEach(format => validate(format))\r\n    this.setOption('_or', (this.getOption('_or') || []).concat(formats).filter(onlyUnique))\r\n  }\r\n  And(...formats) {\r\n    throw new Error('This feature has been temporarily disabled.')\r\n    if (formats.length < 1) throw new Error('Must supply at least 1 format')\r\n\r\n    formats.forEach(format => validate(format))\r\n    this.setOption('_and', (this.getOption('_and') || []).concat(formats).filter(onlyUnique))\r\n  }\r\n  Not(...formats) {\r\n    throw new Error('This feature has been temporarily disabled.')\r\n    if (formats.length < 1) throw new Error('Must supply at least 1 format')\r\n    formats.forEach(format => validate(format))\r\n    this.setOption('_not', (this.getOption('not') || []).concat(formats).filter(onlyUnique))\r\n  }\r\n  // nullable(isNullable = true) {\r\n  //   if (typeof isNullable !== 'boolean') throw new Error('Nullable expected boolean')\r\n  //   this.setOption('nullable', isNullable)\r\n  // }\r\n}\r\n\r\nconst nonSelfReturningFunctions = ['details', 'valid', 'sanitize']\r\n\r\nconst formatProxy = {\r\n  get: (target, prop) => {\r\n    if (target === createFormat) return createFormat[prop]\r\n    if (!(target instanceof Format)) {\r\n      throw new Error('Expected Format Instance')\r\n    }\r\n    if (prop === 'constructor') throw new Error('Cannot retrieve the contructor')\r\n    //if (prop === '_') throw new Error('You must assign the format in the constructor')\r\n    if (prop === 'format') return target.format\r\n    if (typeof target[prop] == 'function') {\r\n      const func = target[prop]\r\n      if (nonSelfReturningFunctions.includes(prop)) return func.bind(target)\r\n      return (...args) => {\r\n        func.apply(target, args)\r\n        return new Proxy(target, formatProxy)\r\n      }\r\n    }\r\n    //if (prop === \"And\") throw require('util').inspect([target, target[prop], prop])\r\n\r\n    return (...args) => {\r\n      const newValue = args.length > 0 ? args[0] : true\r\n      target.format[prop] = newValue\r\n      return new Proxy(target, formatProxy)\r\n    }\r\n  },\r\n  construct(target, args) {\r\n    return createFormat(...args)\r\n  }\r\n}\r\n\r\nfunction createFormat(...args) {\r\n  if (args.length < 1) throw new Error('Must supply a format.')\r\n  return new Proxy(new Format(...args), formatProxy)\r\n}\r\nconst format = new Proxy(createFormat, formatProxy)\r\nexport { format, Format }\r\n","import { Format as FormatClass } from '../exports/Format'\r\n\r\nfunction interpretFormatShorthand(format) {\r\n  if (typeof format == 'object' && format !== null) {\r\n    if (format instanceof FormatClass) return interpretFormatShorthand(format.format)\r\n    if (format.hasOwnProperty('_')) return { ...format, _: interpretFormatShorthand(format._) }\r\n    const output = Array.isArray(format) ? [] : {}\r\n    Object.entries(format).forEach(([key, value]) => {\r\n      output[key] = interpretFormatShorthand(value)\r\n    })\r\n    return output\r\n  }\r\n  return format\r\n}\r\n\r\nexport default interpretFormatShorthand\r\n","import onlyUnique from './onlyUnique'\r\nimport interpretCustomFormats from './interpretCustomFormats'\r\nimport interpretFormatShorthand from './interpretFormatShorthand'\r\nimport { Format } from '../exports/Format'\r\n\r\nconst maxLoopSize = 100\r\n\r\nfunction resolveInlineOptions(resolveFormat, format, options = {}) {\r\n  let newOptions = Object.assign({}, options)\r\n  let ORFormats = []\r\n  let ANDFormats = []\r\n  let NOTFormats = []\r\n\r\n  let hasChanged = true\r\n  let loopCount = 0\r\n  while (hasChanged) {\r\n    hasChanged = false\r\n    while (format instanceof Format) {\r\n      format = interpretFormatShorthand(format)\r\n      hasChanged = true\r\n      loopCount++\r\n      if (loopCount >= maxLoopSize) throw new Error('Max loop size exceeded')\r\n    }\r\n    while (typeof format == 'string') {\r\n      format = interpretCustomFormats(format)\r\n      hasChanged = true\r\n      loopCount++\r\n      if (loopCount >= maxLoopSize) throw new Error('Max loop size exceeded')\r\n    }\r\n    while (hasInlineOptions(format)) {\r\n      newOptions = Object.assign({}, format, newOptions)\r\n      delete newOptions._\r\n      format = format._\r\n      hasChanged = true\r\n      loopCount++\r\n      if (loopCount >= maxLoopSize) throw new Error('Max loop size exceeded')\r\n    }\r\n  }\r\n  if (newOptions.hasOwnProperty('_or')) {\r\n    const orF = newOptions._or\r\n    if (!ORFormats.includes(orF)) {\r\n      if (Array.isArray(orF)) {\r\n        ORFormats = ORFormats.concat(orF).filter(onlyUnique)\r\n      } else {\r\n        ORFormats.push(orF)\r\n      }\r\n    }\r\n    delete newOptions._or\r\n  }\r\n  if (newOptions.hasOwnProperty('_and')) {\r\n    const anF = newOptions._and\r\n    if (!ANDFormats.includes(anF)) {\r\n      if (Array.isArray(anF)) {\r\n        ANDFormats = ANDFormats.concat(anF)\r\n          .filter(onlyUnique)\r\n          .map(value => resolveFormat(value))\r\n      } else {\r\n        ANDFormats.push(anF)\r\n      }\r\n    }\r\n    delete newOptions._and\r\n  }\r\n  if (newOptions.hasOwnProperty('_not')) {\r\n    const noF = newOptions._not\r\n    if (!NOTFormats.includes(noF)) {\r\n      if (Array.isArray(noF)) {\r\n        NOTFormats = NOTFormats.concat(noF)\r\n          .filter(onlyUnique)\r\n          .map(value => resolveFormat(value))\r\n      } else {\r\n        NOTFormats.push(noF)\r\n      }\r\n    }\r\n    delete newOptions._not\r\n  }\r\n  if ((ORFormats.length > 0) + (ANDFormats.length > 0) + (NOTFormats.length > 0) > 1) {\r\n    //throw require('util').inspect([ORFormats, ANDFormats, NOTFormats])\r\n    throw new Error(\r\n      `Cannot use more than one boolean logic condition of differing kinds at the same depth, Total ORFormats: ${ORFormats.length}, Total ANDFormats: ${ANDFormats.length}, total NOTFormats: ${NOTFormats.length}`\r\n    )\r\n  }\r\n  return { options: newOptions, format, ORFormats, ANDFormats, NOTFormats }\r\n}\r\n\r\nfunction hasInlineOptions(format) {\r\n  return (\r\n    typeof format == 'object' &&\r\n    format !== null &&\r\n    !Array.isArray(format) &&\r\n    format.hasOwnProperty('_')\r\n  )\r\n}\r\n\r\nexport default resolveInlineOptions\r\n","function validateObjectOptions(options) {\r\n  const { strict, optionalProps, allOptional, bannedProps } = options\r\n  const classInput = options.class\r\n\r\n  if (options.hasOwnProperty('strict')) {\r\n    if (typeof strict != 'boolean') return 'Invalid Strict Option'\r\n  }\r\n  if (options.hasOwnProperty('allOptional')) {\r\n    if (typeof allOptional != 'boolean') return 'Invalid All Optional Option'\r\n  }\r\n  if (options.hasOwnProperty('optionalProps')) {\r\n    if (!Array.isArray(optionalProps) || optionalProps.some(value => typeof value != 'string'))\r\n      return 'Optional Props must be an array of strings'\r\n  }\r\n  if (options.hasOwnProperty('bannedProps')) {\r\n    if (!Array.isArray(bannedProps) || bannedProps.some(value => typeof value != 'string'))\r\n      return 'Banned Props must be an array of strings'\r\n  }\r\n  // if (options.hasOwnProperty('nullableProps')) {\r\n  //   if (!Array.isArray(nullableProps) || nullableProps.some(value => typeof value != 'string'))\r\n  //     return 'Nullable Props must be an array of strings'\r\n  // }\r\n  if (options.hasOwnProperty('class')) {\r\n    if (!(typeof classInput == 'object' || typeof classInput == 'function'))\r\n      return 'A class must be a function or an object'\r\n  }\r\n  return null\r\n}\r\n\r\nexport default validateObjectOptions\r\n","import allowedOptions from './allowedOptions'\r\nimport resolveInlineOptions from '../functions/resolveInlineOptions'\r\nimport isEmptyObject from '../functions/isEmptyObject'\r\nimport validateObjectOptions from './object'\r\nimport validateArrayOptions from './array'\r\nimport camelCaseToOutputString from '../functions/camelCaseToOutputString'\r\nimport string from './string'\r\nimport number from './number'\r\nimport validateFunctionOptions from './function'\r\nimport ANY from '../exports/ANY'\r\n\r\nconst validPrimitives = [String, Number, Boolean, null, undefined]\r\n//prettier-ignore\r\nconst validatePrimitiveOptions = new Map([\r\n  [String, string],\r\n  [Number, number]\r\n])\r\n\r\nconst primitiveNames = new Map([\r\n  [String, 'String'],\r\n  [Number, 'Number'],\r\n  [Boolean, 'Boolean'],\r\n  [null, 'Null'],\r\n  [undefined, 'Undefined'],\r\n  [Function, 'Function']\r\n])\r\n\r\nfunction validateAny(inlineOptions) {\r\n  const { format, options } = inlineOptions\r\n  if (typeof options != 'object' || options === null) return 'Options are not an Object'\r\n  let allowed = []\r\n  let formatName = 'Internal Error'\r\n  if (validPrimitives.includes(format)) {\r\n    formatName = primitiveNames.get(format)\r\n    if (allowedOptions.primitives.has(format)) allowed = allowedOptions.primitives.get(format)\r\n    if (validatePrimitiveOptions.has(format)) {\r\n      const optionsError = validatePrimitiveOptions.get(format)(options)\r\n      if (optionsError !== null) return optionsError\r\n    }\r\n  } else if (Array.isArray(format) || format === Array) {\r\n    formatName = 'Array'\r\n    allowed = allowedOptions.array\r\n  } else if ((typeof format == 'object' && format !== null) || format === Object) {\r\n    formatName = 'Object'\r\n    allowed = allowedOptions.object\r\n    const optionsError = validateObjectOptions(options)\r\n    if (optionsError !== null) return optionsError\r\n  } else if (typeof format == 'function' || format === Function) {\r\n    formatName = 'Function'\r\n    allowed = allowedOptions.function.concat(allowedOptions.object)\r\n    const optionsError = validateObjectOptions(options) || validateFunctionOptions(options)\r\n    if (optionsError !== null) return optionsError\r\n  } else if (format === ANY) {\r\n    // Do Nothing\r\n  } else {\r\n    return `Invalid Format`\r\n  }\r\n  if (options.hasOwnProperty('validate') && typeof options.validate !== 'function')\r\n    return 'Expected a function for the validation option'\r\n  if (options.hasOwnProperty('nullable') && typeof options.nullable !== 'boolean')\r\n    return 'Expected a boolean for the nullable option'\r\n  allowed = allowed.concat(allowedOptions.universal)\r\n\r\n  const illegalKeys = Object.keys(options).filter(key => !allowed.includes(key))\r\n  const illegalKey = illegalKeys[0]\r\n  if (illegalKeys.length > 0) return `Invalid Option \"${illegalKey}\" for Format ${formatName}`\r\n\r\n  return null\r\n}\r\n\r\nexport default validateAny\r\n","function validateStringOptions(options) {\r\n  //prettier-ignore\r\n  const {regex, minLength, maxLength, length, allowed, banned, lowercase, uppercase, email, whitespace, trimmed} = options\r\n\r\n  if (options.hasOwnProperty('email')) {\r\n    if (typeof email != 'boolean') return 'Invalid Email Option'\r\n  }\r\n  if (options.hasOwnProperty('minLength')) {\r\n    if (typeof minLength != 'number' || !isFinite(minLength) || minLength < 0)\r\n      return 'Invalid Minimum Length Option'\r\n  }\r\n  if (options.hasOwnProperty('maxLength')) {\r\n    if (\r\n      typeof options.maxLength != 'number' ||\r\n      !isFinite(options.maxLength) ||\r\n      options.maxLength < 0\r\n    )\r\n      return 'Invalid Maximum Length Option'\r\n  }\r\n  if (options.hasOwnProperty('length')) {\r\n    if (typeof length != 'number' || !isFinite(length) || length < 0) return 'Invalid Length Option'\r\n  }\r\n  if (options.hasOwnProperty('allowed')) {\r\n    if (typeof allowed != 'string' || allowed.length < 1) return 'Invalid Allowed Option'\r\n  }\r\n  if (options.hasOwnProperty('banned')) {\r\n    if (typeof banned != 'string' || banned.length < 1) return 'Invalid Banned Option'\r\n  }\r\n  if (options.hasOwnProperty('lowercase')) {\r\n    if (typeof lowercase != 'boolean') return 'Invalid Lowercase Option'\r\n  }\r\n  if (options.hasOwnProperty('uppercase')) {\r\n    if (typeof uppercase != 'boolean') return 'Invalid Lowercase Option'\r\n  }\r\n  if (options.hasOwnProperty('whitespace')) {\r\n    if (typeof whitespace != 'boolean') return 'Invalid Whitespace Option'\r\n  }\r\n  if (options.hasOwnProperty('regex')) {\r\n    if (!(regex instanceof RegExp)) return 'Invalid Regex Option'\r\n  }\r\n  if (options.hasOwnProperty('trimmed')) {\r\n    if (typeof trimmed != 'boolean') return 'Invalid Trimmed Option'\r\n  }\r\n  if (options.hasOwnProperty('AllOptional')) {\r\n    if (typeof options.allOptionsOptional != 'boolean') return 'Invalid All Optional Option'\r\n  }\r\n  return null\r\n}\r\n\r\nexport default validateStringOptions\r\n","function validateNumberOptions(options) {\r\n  const { allowNaN, finite, min, max, even, odd } = options\r\n\r\n  if (options.hasOwnProperty('allowNaN')) {\r\n    if (typeof allowNaN != 'boolean') return 'Invalid AllowNaN Option'\r\n  }\r\n  if (options.hasOwnProperty('finite')) {\r\n    if (typeof finite != 'boolean') return 'Invalid Finite Option'\r\n  }\r\n  if (options.hasOwnProperty('min')) {\r\n    if (typeof min != 'number' && !isFinite(min)) return 'Invalid Min Option'\r\n  }\r\n  if (options.hasOwnProperty('max')) {\r\n    if (typeof max != 'number' || !isFinite(max)) return 'Invalid Max Option'\r\n  }\r\n  if (options.hasOwnProperty('even')) {\r\n    if (typeof even != 'boolean') return 'Invalid Even Option'\r\n  }\r\n  if (options.hasOwnProperty('odd')) {\r\n    if (typeof odd != 'boolean') return 'Invalid Odd Option'\r\n  }\r\n  return null\r\n}\r\n\r\nexport default validateNumberOptions\r\n","import validateAny from '../validate/any'\r\n\r\nfunction ensureValidArguments(inlineOptions) {\r\n  // This function has been disabled as it cannot handle deep formats\r\n  //throw new Error('This feature has been temporarily disabled')\r\n  const { format, options } = inlineOptions\r\n  //if (arguments.length < 1) throw new Error('Missing Input Argument')\r\n  //if (arguments.length < 2) throw new Error('Missing Format Argument')\r\n  if (typeof options != 'object' || options === null) throw new Error(`Options Invalid`)\r\n  const error = validateAny(inlineOptions)\r\n  if (error !== null) {\r\n    const err = new Error(error)\r\n    err.inlineOptions = inlineOptions\r\n    throw err\r\n  }\r\n  return true\r\n}\r\n\r\nexport default ensureValidArguments\r\n","import ensureValidArguments from './ensureValidArguments'\r\nimport resolveInlineOptions from './resolveInlineOptions'\r\n\r\nfunction resolveFormat(...args) {\r\n  if (args.length < 1) throw new Error('Must specify a format')\r\n\r\n  const inlineOptions = resolveInlineOptions(resolveFormat, ...args)\r\n\r\n  try {\r\n    ensureValidArguments(inlineOptions)\r\n  } catch (error) {\r\n    throw error\r\n  }\r\n  return inlineOptions\r\n}\r\n\r\nexport default resolveFormat\r\n","import firstError from '../functions/firstError'\r\nimport resolveFormat from '../functions/resolveFormat'\r\n\r\nfunction sanitizeObject(sanitizeAny, input, format, options) {\r\n  let { strict } = options\r\n  if (format === Object) {\r\n    format = {}\r\n    if (typeof strict != 'boolean') strict = false\r\n  }\r\n\r\n  const errors = {}\r\n  const { standard, allOptional, optionalProps = [], bannedProps = [] } = options\r\n  const classInput = options.class\r\n  if (options.hasOwnProperty('class')) {\r\n    const className = classInput.constructor.name\r\n    if (!(input instanceof classInput))\r\n      return (\r\n        'Expected a member of the provided class' +\r\n        (typeof className == 'string' && className.length > 1 ? ` \"${className}\"` : '')\r\n      )\r\n  }\r\n  if (typeof strict != 'boolean' && options.hasOwnProperty('standard')) strict = false\r\n  if (typeof strict != 'boolean') strict = true\r\n  const inputKeys = Object.keys(input)\r\n\r\n  if (strict === true || options.hasOwnProperty('standard')) {\r\n    inputKeys.forEach(inputKey => {\r\n      if (!format.hasOwnProperty(inputKey)) {\r\n        if (options.hasOwnProperty('standard')) {\r\n          const valid = sanitizeAny(input[inputKey], standard)\r\n          if (valid !== null) errors[inputKey] = valid\r\n        } else {\r\n          errors[inputKey] = `Invalid Property \"${inputKey}\"`\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  if (options.hasOwnProperty('bannedProps')) {\r\n    bannedProps.forEach(bannedProp => {\r\n      if (input.hasOwnProperty(bannedProp) && !errors[bannedProp])\r\n        errors[bannedProp] = `Invalid Property \"${bannedProp}\"`\r\n    })\r\n  }\r\n\r\n  Object.entries(format).forEach(([childKey, childFormat]) => {\r\n    if (!errors[childKey]) {\r\n      const inlineOptions = resolveFormat(childFormat)\r\n      childFormat = inlineOptions.format\r\n      const childOptions = inlineOptions.options\r\n      if (Object.prototype.hasOwnProperty.call(input, childKey)) {\r\n        const childError = sanitizeAny(input[childKey], childFormat, childOptions)\r\n        if (childError !== null) errors[childKey] = childError\r\n      } else if (\r\n        allOptional !== true &&\r\n        strict === true &&\r\n        typeof childKey == 'string' &&\r\n        !optionalProps.includes(childKey)\r\n      ) {\r\n        errors[childKey] = `Property ${childKey} Required`\r\n      }\r\n    }\r\n  })\r\n\r\n  if (Object.keys(errors).length < 1) return null\r\n  return errors\r\n}\r\n\r\nexport default sanitizeObject\r\n","//prettier-ignore\nconst defaultOptions = new Map([\n  [String, {\n    minLength: 1\n  }],\n  [Number, {\n    allowNaN: false,\n    finite: true\n  }],\n  [Boolean, {\n\n  }],\n  [null, {\n\n  }],\n  [undefined, {\n\n  }],\n  [Array, {\n\n  }],\n  [Object, {\n  }]\n])\n\nexport default defaultOptions\n","// CREDIT TO http://emailregex.com/\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n\r\nfunction validEmail(data) {\r\n  return emailRegex.test(data)\r\n}\r\n\r\nexport default validEmail\r\n","function sanitizeBooleanFormats(sanitizeAny, input, inlineOptions) {\r\n  const { ORFormats, ANDFormats, NOTFormats, options, format } = inlineOptions\r\n  // Handling NOT\r\n  if (NOTFormats.length > 0) {\r\n    for (let i = 0, l = NOTFormats.length; i < l; i++) {\r\n      // Store the length instead of retrieving it every time for optimal performance\r\n      const error = sanitizeAny(input, NOTFormats[i])\r\n      if (error === null) return 'Something was NOT allowed'\r\n    }\r\n  }\r\n  // Handling AND\r\n  if (ANDFormats.length > 0) {\r\n    for (let i = 0, l = ANDFormats.length; i < l; i++) {\r\n      // Store the length instead of retrieving it every time for optimal performance\r\n      const error = sanitizeAny(input, ANDFormats[i])\r\n      if (error !== null) return error\r\n    }\r\n  }\r\n  const firstError = sanitizeAny(input, format, options)\r\n  if (firstError === null) return null\r\n  if (ORFormats.length > 0) {\r\n    for (let i = 0, l = ORFormats.length; i < l; i++) {\r\n      // Store the length instead of retrieving it every time for optimal performance\r\n      const error = sanitizeAny(input, ORFormats[i])\r\n      if (error === null) return null\r\n    }\r\n    return firstError\r\n  }\r\n  throw new Error('Function not supposed to reach the end')\r\n}\r\n\r\nexport default sanitizeBooleanFormats\r\n","function sanitizeFunction(sanitizeAny, input, format, options) {\n  if (typeof input != 'function') return 'Expected Function'\n  return null\n}\n\nexport default sanitizeFunction\n","function deepEqual(input1, input2) {\r\n  if (input1 === input2)\r\n    // it's just the same input. No need to compare.\r\n    return true\r\n  if (typeof input1 != typeof input2) return false // ensure the same type\r\n\r\n  if (isPrimitive(input1) || isPrimitive(input2))\r\n    // compare primitives\r\n    return input1 === input2\r\n\r\n  if (Object.getPrototypeOf(input1) !== Object.getPrototypeOf(input2)) return false // Ensure matching Protoypes\r\n\r\n  if (typeof input1 == 'function') {\r\n    if (input1.toString() !== input2.toString()) return false // Ensure functions are the same code\r\n  }\r\n\r\n  // compare objects with same number of keys\r\n  for (let key in input1) {\r\n    if (!(key in input2)) return false //other object doesn't have this prop\r\n    if (!deepEqual(input1[key], input2[key])) return false\r\n  }\r\n  for (let key in input2) {\r\n    if (!(key in input1)) return false //other object doesn't have this prop\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n//check if value is primitive\r\nfunction isPrimitive(obj) {\r\n  return obj !== Object(obj)\r\n}\r\n\r\nexport default deepEqual\r\n","import sanitizeArray from './array'\r\nimport sanitizeObject from './object'\r\nimport defaultOptions from '../defaultOptions'\r\nimport { Format as FormatClass } from '../exports/Format'\r\nimport string from './string'\r\nimport number from './number'\r\nimport boolean from './boolean'\r\nimport booleanFormats from './booleanFormats'\r\nimport sanitizeNull from './null'\r\nimport sanitizeFunction from './function'\r\nimport sanitizeUndefined from './undefined'\r\nimport deepEqual from '../functions/deepEqual'\r\nimport ANY from '../exports/ANY'\r\nimport resolveFormat from '../functions/resolveFormat'\r\n\r\nconst primitives = new Map([\r\n  [String, string],\r\n  [Number, number],\r\n  [Boolean, boolean],\r\n  [null, sanitizeNull],\r\n  [undefined, sanitizeUndefined]\r\n])\r\n\r\nfunction sanitizeAny(input, ...args) {\r\n  const inlineOptions = resolveFormat(...args)\r\n  let { format, options, ORFormats, ANDFormats, NOTFormats } = inlineOptions\r\n\r\n  //throw require('util').inspect(format)\r\n\r\n  // Start Section for handling Boolean Logic\r\n  if (ORFormats.length > 0 || ANDFormats.length > 0 || NOTFormats.length > 0)\r\n    return booleanFormats(sanitizeAny, input, inlineOptions)\r\n  if (options.nullable === true && input === null) return null\r\n  // End section for handling Boolean Logic\r\n\r\n  if (options.hasOwnProperty('equalTo') && !deepEqual(input, options.equalTo))\r\n    return 'Input Not Equal'\r\n  if (format === ANY) {\r\n    // Do Nothing\r\n  } else if (primitives.has(format)) {\r\n    if (defaultOptions.has(format)) options = Object.assign({}, defaultOptions.get(format), options)\r\n    const primitiveError = primitives.get(format)(input, options)\r\n    if (primitiveError !== null) return primitiveError\r\n  } else if (Array.isArray(format) || format === Array) {\r\n    options = Object.assign({}, defaultOptions.get(Array), options)\r\n    const arrayErrors = sanitizeArray(sanitizeAny, input, format, options)\r\n    if (arrayErrors !== null) return arrayErrors\r\n  } else if (typeof format == 'object' || format === Object) {\r\n    if (typeof input != 'object' || input === null || Array.isArray(input))\r\n      return 'Expected an Object' // We had to move this check outside so we could re-use the sanitizeObject method for the functions as well\r\n    options = Object.assign({}, defaultOptions.get(Object), options)\r\n    const objectErrors = sanitizeObject(sanitizeAny, input, format, options)\r\n    if (objectErrors !== null) return objectErrors\r\n  } else if (typeof format == 'function' || format === Function) {\r\n    const functionErrors = sanitizeFunction(sanitizeAny, input, format, options)\r\n    if (functionErrors !== null) return functionErrors\r\n    const objectErrors = sanitizeObject(sanitizeAny, input, format, options)\r\n    if (objectErrors !== null) return objectErrors\r\n  } else {\r\n    throw new Error('Invalid Format')\r\n  }\r\n\r\n  if (options.hasOwnProperty('validate')) {\r\n    if (Array.isArray(options.validate)) {\r\n      for (let i = 0; i < options.validate.length; i++) {\r\n        const output = options.validate[i](input)\r\n        if (typeof output == 'string') {\r\n          if (output.length < 1)\r\n            throw new Error('Custom Error Message Must be longer than 0 characters.')\r\n          return output\r\n        } else if (typeof output == 'boolean') {\r\n          if (output === false) return 'Failed Validation Function'\r\n        } else {\r\n          throw new Error('Validation Function Returned Unexpected output')\r\n        }\r\n      }\r\n    } else {\r\n      const output = options.validate(input)\r\n      if (typeof output == 'string') {\r\n        if (output.length < 1)\r\n          throw new Error('Custom Error Message Must be longer than 0 characters.')\r\n        return output\r\n      } else if (typeof output == 'boolean') {\r\n        if (output === false) return 'Failed Validation Function'\r\n      } else {\r\n        throw new Error('Validation Function Returned Unexpected output')\r\n      }\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default sanitizeAny\r\n","import validEmail from '../functions/validEmail'\r\n\r\nfunction sanitizeString(input, options) {\r\n  //prettier-ignore\r\n  const {regex, minLength, maxLength, length, allowed, banned, lowercase, uppercase, email, whitespace, trimmed} = options\r\n\r\n  if (typeof input != 'string') return 'Expected String'\r\n\r\n  if (options.hasOwnProperty('email')) {\r\n    if (email === true && !validEmail(input)) return 'Email Invalid'\r\n  }\r\n  if (options.hasOwnProperty('minLength')) {\r\n    if (input.length < minLength) return 'Too short'\r\n  }\r\n  if (options.hasOwnProperty('maxLength')) {\r\n    if (input.length > maxLength) return 'Too long'\r\n  }\r\n  if (options.hasOwnProperty('length')) {\r\n    if (input.length != length) return 'Incorrect Length'\r\n  }\r\n  if (options.hasOwnProperty('allowed')) {\r\n    const bannedLetter = Array.from(input).find(letter => !allowed.includes(letter))\r\n    if (bannedLetter) return `Character not allowed \"${bannedLetter}\"`\r\n  }\r\n  if (options.hasOwnProperty('banned')) {\r\n    const bannedLetter = Array.from(banned).find(letter => input.includes(letter))\r\n    if (bannedLetter) return `Character not allowed \"${bannedLetter}\"`\r\n  }\r\n  if (options.hasOwnProperty('lowercase')) {\r\n    if (lowercase === true && input.toLowerCase() != input) return 'Lowercase only'\r\n  }\r\n  if (options.hasOwnProperty('uppercase')) {\r\n    if (uppercase === true && input.toUpperCase() != input) return 'Uppercase only'\r\n  }\r\n  if (options.hasOwnProperty('whitespace')) {\r\n    if (whitespace === false && /\\s/.test(input)) return 'No whitespace'\r\n  }\r\n  if (options.hasOwnProperty('regex')) {\r\n    if (regex.test(input) !== true) return 'Failed regex'\r\n  }\r\n  if (options.hasOwnProperty('trimmed')) {\r\n    if (trimmed === true) {\r\n      if (/^\\s/.test(input)) return 'Cannot start with whitespace'\r\n      if (/\\s$/.test(input)) return 'Cannot end with whitespace'\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nexport default sanitizeString\r\n","function sanitizeNumber(input, options) {\r\n  if (typeof input != 'number') return 'Expected Number'\r\n  const { allowNaN, finite, min, max, even, odd, integer } = options\r\n\r\n  if (options.hasOwnProperty('allowNaN')) {\r\n    if (typeof allowNaN != 'boolean') throw new Error('Invalid AllowNaN Option')\r\n    if (allowNaN === false && isNaN(input)) return 'NaN not allowed'\r\n  }\r\n  if (options.hasOwnProperty('finite')) {\r\n    if (typeof finite != 'boolean') throw new Error('Invalid Finite Option')\r\n    if (finite === true && !isFinite(input) && !isNaN(input)) return 'Infinity not allowed'\r\n  }\r\n  if (options.hasOwnProperty('min')) {\r\n    if (typeof min != 'number' && !isFinite(min)) throw new Error('Invalid Min Option')\r\n    if (input < min) return 'Too small'\r\n  }\r\n  if (options.hasOwnProperty('max')) {\r\n    if (typeof max != 'number' || !isFinite(max)) throw new Error('Invalid Max Option')\r\n    if (input > max) return 'Too great'\r\n  }\r\n  if (options.hasOwnProperty('even')) {\r\n    if (typeof even != 'boolean') throw new Error('Invalid Even Option')\r\n    if (even === true && input % 2 != 0) return 'Not even'\r\n  }\r\n  if (options.hasOwnProperty('odd')) {\r\n    if (typeof odd != 'boolean') throw new Error('Invalid Odd Option')\r\n    if (odd === true && input % 2 != 1) return 'Not odd'\r\n  }\r\n  if (options.hasOwnProperty('integer')) {\r\n    if (typeof integer != 'boolean') throw new Error('Invalid Integer Option')\r\n    if (integer === true && input % 1 !== 0) return 'Not an integer'\r\n  }\r\n  return null\r\n}\r\n\r\nexport default sanitizeNumber\r\n","function sanitizeBoolean(input, options) {\r\n  if (typeof input != 'boolean') return 'Expected Boolean'\r\n  return null\r\n}\r\n\r\nexport default sanitizeBoolean\r\n","function sanitizeNull(input, options) {\r\n  if (input !== null) return 'Expected Null'\r\n  return null\r\n}\r\n\r\nexport default sanitizeNull\r\n","function sanitizeUndefined(input, options) {\r\n  if (input !== undefined) return 'Expected Undefined'\r\n  return null\r\n}\r\n\r\nexport default sanitizeUndefined\r\n","import sanitizeAny from '../sanitize/any'\r\n\r\nfunction details(...args) {\r\n  return sanitizeAny(...args)\r\n}\r\n\r\nexport default details\r\n","import validate from '../validate/any'\r\n\r\nfunction And(...formats) {\r\n  if (formats.length < 2) throw new Error('Must supply at least 2 formats')\r\n  formats.forEach(format => validate(format))\r\n  return { _: formats[0], _and: formats.slice(1) }\r\n}\r\n\r\nexport default And\r\n","import ANY from './ANY'\r\nimport validate from '../validate/any'\r\n\r\nfunction Not(...formats) {\r\n  if (formats.length < 1) throw new Error('Must supply at least 1 format')\r\n  formats.forEach(format => validate(format))\r\n  return { _: ANY, _not: formats }\r\n}\r\n\r\nexport default Not\r\n","import validate from '../validate/any'\r\n\r\nfunction Or(...formats) {\r\n  if (formats.length < 2) throw new Error('Must supply at least 2 formats')\r\n  formats.forEach(format => validate(format))\r\n  return { _: formats[0], _or: formats.slice(1) }\r\n}\r\n\r\nexport default Or\r\n","import validate from '../validate/any'\r\nimport customFormats from '../customFormats'\r\n\r\nfunction customFormat(name, format) {\r\n  if (arguments.length === 1 && typeof arguments[0] == 'object' && arguments[0] !== null) {\r\n    Object.entries(arguments[0]).forEach(([key, value]) => {\r\n      customFormat(key, value)\r\n    })\r\n    return\r\n  }\r\n  if (typeof name != 'string' || name.length < 1) throw new Error('Custom Format Name Invalid')\r\n  const formatErrors = validate(format)\r\n  if (formatErrors !== null) throw new Error(`Custom Format Invalid, \"${format}\"`)\r\n\r\n  customFormats[name] = format\r\n}\r\n\r\nexport default customFormat\r\n","import validate from '../validate/any'\r\n\r\nfunction getFormatErrors(format) {\r\n  if (arguments.length < 1) throw new Error('Must supply a format')\r\n  return validate(format)\r\n}\r\n\r\nexport default getFormatErrors\r\n","function reconstructFormat(resolvedFormat) {\r\n  const { format, options, ANDFormats, NOTFormats, ORFormats } = resolvedFormat\r\n  const hasOptions = Object.keys(options).length > 0\r\n  const hasOR = Object.keys(ORFormats).length > 0\r\n  const hasAND = Object.keys(ANDFormats).length > 0\r\n  const hasNOT = Object.keys(NOTFormats).length > 0\r\n  if (hasOptions || hasOR || hasAND || hasNOT) {\r\n    let output = { _: format }\r\n\r\n    if (hasOptions) {\r\n      Object.assign(output, resolvedFormat.options)\r\n    }\r\n    if (hasOR) {\r\n      output._or = ORFormat\r\n    }\r\n    if (hasAND) {\r\n      output._and = ANDFormat\r\n    }\r\n    if (hasNOT) {\r\n      output.NOTFormats = NOTFormat\r\n    }\r\n    return output\r\n  } else {\r\n    return resolvedFormat.format\r\n  }\r\n}\r\n\r\nexport default reconstructFormat\r\n","import resolveFormat from '../functions/resolveFormat'\r\n\r\nfunction reduceFormat(...args) {\r\n  if (!Array.isArray(args)) throw new Error('Please supply an array of arg(s)')\r\n  if (args.length > 2) throw new Error('Received too many arguments')\r\n  const resolved = resolveFormat(...args)\r\n  let output = resolved.format\r\n  if (\r\n    Object.keys(resolved.options).length > 0 ||\r\n    resolved.ORFormats.length > 0 ||\r\n    resolved.ANDFormats.length > 0 ||\r\n    resolved.NOTFormats.length > 0\r\n  )\r\n    output = { _: output, ...resolved.options }\r\n  if (resolved.ORFormats.length > 0) {\r\n    output._or = resolved.ORFormats\r\n  }\r\n  if (resolved.ANDFormats.length > 0) {\r\n    output._and = resolved.ANDFormats\r\n  }\r\n  if (resolved.NOTFormats.length > 0) {\r\n    output._not = resolved.NOTFormats\r\n  }\r\n  return output\r\n}\r\n\r\nexport default reduceFormat\r\n","import validate from '../validate/any'\r\nimport sanitize from '../sanitize/any'\r\nimport details from './details'\r\n\r\nfunction sandhandsExpress(...args) {\r\n  return (req, res, next) => {\r\n    if (!req.hasOwnProperty('body')) return res.status(500).send('Expected Body')\r\n    const inputErrors = details(req.body, ...args)\r\n    if (inputErrors !== null) return res.status(400).json(inputErrors)\r\n    next()\r\n  }\r\n}\r\n\r\nexport default sandhandsExpress\r\n","import validate from '../validate/any'\r\nimport isEmptyObject from '../functions/isEmptyObject'\r\nimport firstError from '../functions/firstError'\r\nimport defaultOptions from '../defaultOptions'\r\n\r\nfunction setDefault(type, defaults) {\r\n  if (isEmptyObject(type)) type = Object\r\n  if (Array.isArray(type) && type.length === 0) type = []\r\n\r\n  if (!defaultOptions.has(type)) throw new Error('Invalid Type')\r\n\r\n  const formatError = validate(type === Object ? {} : type === Array ? [] : type, defaults)\r\n  if (formatError !== null) throw new Error(`Invalid Default Options, Error: \"${formatError}\"`)\r\n\r\n  defaultOptions.set(type, Object.assign({}, defaultOptions.get(type), defaults))\r\n}\r\n\r\nexport default setDefault\r\n","function isEmptyObject(object) {\r\n  if (typeof object != 'object' || object === null || Object.getOwnPropertyNames(object).length > 0)\r\n    return false\r\n  return true\r\n}\r\n\r\nexport default isEmptyObject\r\n"],"names":["firstError","errors","deep","Array","isArray","i","length","error","values","Object","sanitizeArray","sanitizeAny","input","format","options","firstAsStandard","strict","minLength","maxLength","hasOwnProperty","validators","Error","hasStandard","standard","splice","prototype","forEach","call","inputValue","index","inputError","value","universal","freeze","primitives","Map","String","Number","defineProperties","set","get","configurable","delete","object","array","functionOptions","function","onlyUnique","self","indexOf","customFormats","email","_","lowercase","username","regex","trimmed","validate","str","startsWith","endsWith","includes","password","zipCode","require","validator","IP","interpretCustomFormats","sanitize","sanitationDetails","finalError","valid","Format","inlineOptions","resolveFormat","this","ANY","setOptions","console","warn","assign","setOption","optionName","getOption","details","Or","And","Not","nonSelfReturningFunctions","formatProxy","target","prop","createFormat","func","bind","apply","Proxy","args","newValue","construct","interpretFormatShorthand","FormatClass","output","entries","resolveInlineOptions","newOptions","ORFormats","ANDFormats","NOTFormats","hasChanged","loopCount","hasInlineOptions","orF","_or","concat","filter","push","anF","_and","map","noF","_not","validateObjectOptions","optionalProps","allOptional","bannedProps","classInput","some","validPrimitives","Boolean","undefined","validatePrimitiveOptions","allowed","banned","uppercase","whitespace","isFinite","RegExp","allOptionsOptional","allowNaN","finite","min","max","even","odd","primitiveNames","Function","validateAny","formatName","allowedOptions","has","optionsError","nullable","illegalKeys","keys","key","ensureValidArguments","err","sanitizeObject","className","constructor","name","inputKeys","inputKey","bannedProp","childKey","childFormat","childOptions","childError","defaultOptions","emailRegex","sanitizeBooleanFormats","l","sanitizeFunction","deepEqual","input1","input2","isPrimitive","getPrototypeOf","toString","obj","test","bannedLetter","from","find","letter","toLowerCase","toUpperCase","integer","isNaN","booleanFormats","equalTo","primitiveError","arrayErrors","objectErrors","functionErrors","formats","slice","customFormat","arguments","formatErrors","resolvedFormat","hasOptions","hasOR","hasAND","hasNOT","ORFormat","ANDFormat","NOTFormat","resolved","req","res","next","status","send","inputErrors","body","json","type","defaults","getOwnPropertyNames","isEmptyObject","formatError"],"mappings":"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"}